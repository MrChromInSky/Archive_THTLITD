//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/[General]/[Input System}/InputAction/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""05ad8875-2eb1-4784-b14f-90a02b47656b"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""74ad3aea-be82-4f26-b591-c91dae043c81"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""6b027922-fd6f-4064-aacd-9a11508d4ffd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""08e2cc4f-7594-4781-aec1-dc6ce2430878"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""44fda2bd-0e4c-4c0a-841f-da42cbc12d16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""70709615-273b-43a2-86ab-b64fc23a0abc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9f1289e1-eb2d-4b3f-a357-51b87332c14d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a2406ced-bddb-4281-8d07-64932c4777c1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.01,y=0.01)"",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""500cf2bf-a39c-4c20-93d4-53f1fc475cdf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""824f1cef-f2f4-4cae-b343-ebb7b42dbb8b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fc6cb672-92b0-44d1-b584-308e7a5df4e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f32d1034-9947-48e2-a200-63485d933016"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""58cc0e74-93ec-433e-9382-703169ed54b4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1739b638-44db-4844-ba77-68890e8e44d7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26e20bff-b872-4e6e-93a6-da835fae192b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bd9579b-11dc-4d4c-937f-99164cca9f76"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df0900a3-edab-4f9e-a136-22a8a101a651"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_Items"",
            ""id"": ""497b38d5-8920-49ae-ad5c-12c225f392bc"",
            ""actions"": [
                {
                    ""name"": ""Item_Interaction_Primary"",
                    ""type"": ""Button"",
                    ""id"": ""fb1c6eb1-1228-44fa-a83e-7cd42c1b4e14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Item_Interaction_Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""5f77b33e-5600-437b-98fb-a034375bc1ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hands_HidePullOut"",
                    ""type"": ""Button"",
                    ""id"": ""42c11d7c-3697-47b7-aafa-3a48273268cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7dbb1a4-016a-4ebd-9278-da087f1da09b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Item_Interaction_Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d345852-de80-427e-ad8b-c141e05b64c1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Item_Interaction_Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b0134f0-8537-48b7-83ba-fbe65fd3eb00"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Hands_HidePullOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_UI"",
            ""id"": ""968f95ff-f06c-4ba6-b416-f46b9e0273d5"",
            ""actions"": [
                {
                    ""name"": ""Inventory_Open"",
                    ""type"": ""Button"",
                    ""id"": ""1ac677e6-53a2-469f-a604-b0fe9ba1108b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory_Item_Remove"",
                    ""type"": ""Button"",
                    ""id"": ""2b4526b0-2644-4b18-b887-c85f881f7cb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory_Cursor_Position"",
                    ""type"": ""Value"",
                    ""id"": ""3144f8e3-cd1c-421a-86d7-03d61d1d743b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9599a663-17e9-4f69-9409-54f497e76ce0"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Inventory_Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b21e998-18a8-400e-aeea-5c9b19fd6288"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Inventory_Item_Remove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b814d61c-ab7b-4f8a-b673-4df06456c806"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Inventory_Cursor_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        // Player_Items
        m_Player_Items = asset.FindActionMap("Player_Items", throwIfNotFound: true);
        m_Player_Items_Item_Interaction_Primary = m_Player_Items.FindAction("Item_Interaction_Primary", throwIfNotFound: true);
        m_Player_Items_Item_Interaction_Secondary = m_Player_Items.FindAction("Item_Interaction_Secondary", throwIfNotFound: true);
        m_Player_Items_Hands_HidePullOut = m_Player_Items.FindAction("Hands_HidePullOut", throwIfNotFound: true);
        // Player_UI
        m_Player_UI = asset.FindActionMap("Player_UI", throwIfNotFound: true);
        m_Player_UI_Inventory_Open = m_Player_UI.FindAction("Inventory_Open", throwIfNotFound: true);
        m_Player_UI_Inventory_Item_Remove = m_Player_UI.FindAction("Inventory_Item_Remove", throwIfNotFound: true);
        m_Player_UI_Inventory_Cursor_Position = m_Player_UI.FindAction("Inventory_Cursor_Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Run;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_Interact;
    public struct PlayerActions
    {
        private @GameControls m_Wrapper;
        public PlayerActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Run.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Player_Items
    private readonly InputActionMap m_Player_Items;
    private IPlayer_ItemsActions m_Player_ItemsActionsCallbackInterface;
    private readonly InputAction m_Player_Items_Item_Interaction_Primary;
    private readonly InputAction m_Player_Items_Item_Interaction_Secondary;
    private readonly InputAction m_Player_Items_Hands_HidePullOut;
    public struct Player_ItemsActions
    {
        private @GameControls m_Wrapper;
        public Player_ItemsActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Item_Interaction_Primary => m_Wrapper.m_Player_Items_Item_Interaction_Primary;
        public InputAction @Item_Interaction_Secondary => m_Wrapper.m_Player_Items_Item_Interaction_Secondary;
        public InputAction @Hands_HidePullOut => m_Wrapper.m_Player_Items_Hands_HidePullOut;
        public InputActionMap Get() { return m_Wrapper.m_Player_Items; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_ItemsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_ItemsActions instance)
        {
            if (m_Wrapper.m_Player_ItemsActionsCallbackInterface != null)
            {
                @Item_Interaction_Primary.started -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnItem_Interaction_Primary;
                @Item_Interaction_Primary.performed -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnItem_Interaction_Primary;
                @Item_Interaction_Primary.canceled -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnItem_Interaction_Primary;
                @Item_Interaction_Secondary.started -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnItem_Interaction_Secondary;
                @Item_Interaction_Secondary.performed -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnItem_Interaction_Secondary;
                @Item_Interaction_Secondary.canceled -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnItem_Interaction_Secondary;
                @Hands_HidePullOut.started -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnHands_HidePullOut;
                @Hands_HidePullOut.performed -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnHands_HidePullOut;
                @Hands_HidePullOut.canceled -= m_Wrapper.m_Player_ItemsActionsCallbackInterface.OnHands_HidePullOut;
            }
            m_Wrapper.m_Player_ItemsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Item_Interaction_Primary.started += instance.OnItem_Interaction_Primary;
                @Item_Interaction_Primary.performed += instance.OnItem_Interaction_Primary;
                @Item_Interaction_Primary.canceled += instance.OnItem_Interaction_Primary;
                @Item_Interaction_Secondary.started += instance.OnItem_Interaction_Secondary;
                @Item_Interaction_Secondary.performed += instance.OnItem_Interaction_Secondary;
                @Item_Interaction_Secondary.canceled += instance.OnItem_Interaction_Secondary;
                @Hands_HidePullOut.started += instance.OnHands_HidePullOut;
                @Hands_HidePullOut.performed += instance.OnHands_HidePullOut;
                @Hands_HidePullOut.canceled += instance.OnHands_HidePullOut;
            }
        }
    }
    public Player_ItemsActions @Player_Items => new Player_ItemsActions(this);

    // Player_UI
    private readonly InputActionMap m_Player_UI;
    private IPlayer_UIActions m_Player_UIActionsCallbackInterface;
    private readonly InputAction m_Player_UI_Inventory_Open;
    private readonly InputAction m_Player_UI_Inventory_Item_Remove;
    private readonly InputAction m_Player_UI_Inventory_Cursor_Position;
    public struct Player_UIActions
    {
        private @GameControls m_Wrapper;
        public Player_UIActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory_Open => m_Wrapper.m_Player_UI_Inventory_Open;
        public InputAction @Inventory_Item_Remove => m_Wrapper.m_Player_UI_Inventory_Item_Remove;
        public InputAction @Inventory_Cursor_Position => m_Wrapper.m_Player_UI_Inventory_Cursor_Position;
        public InputActionMap Get() { return m_Wrapper.m_Player_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_UIActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_UIActions instance)
        {
            if (m_Wrapper.m_Player_UIActionsCallbackInterface != null)
            {
                @Inventory_Open.started -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Open;
                @Inventory_Open.performed -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Open;
                @Inventory_Open.canceled -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Open;
                @Inventory_Item_Remove.started -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Item_Remove;
                @Inventory_Item_Remove.performed -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Item_Remove;
                @Inventory_Item_Remove.canceled -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Item_Remove;
                @Inventory_Cursor_Position.started -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Cursor_Position;
                @Inventory_Cursor_Position.performed -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Cursor_Position;
                @Inventory_Cursor_Position.canceled -= m_Wrapper.m_Player_UIActionsCallbackInterface.OnInventory_Cursor_Position;
            }
            m_Wrapper.m_Player_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inventory_Open.started += instance.OnInventory_Open;
                @Inventory_Open.performed += instance.OnInventory_Open;
                @Inventory_Open.canceled += instance.OnInventory_Open;
                @Inventory_Item_Remove.started += instance.OnInventory_Item_Remove;
                @Inventory_Item_Remove.performed += instance.OnInventory_Item_Remove;
                @Inventory_Item_Remove.canceled += instance.OnInventory_Item_Remove;
                @Inventory_Cursor_Position.started += instance.OnInventory_Cursor_Position;
                @Inventory_Cursor_Position.performed += instance.OnInventory_Cursor_Position;
                @Inventory_Cursor_Position.canceled += instance.OnInventory_Cursor_Position;
            }
        }
    }
    public Player_UIActions @Player_UI => new Player_UIActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IPlayer_ItemsActions
    {
        void OnItem_Interaction_Primary(InputAction.CallbackContext context);
        void OnItem_Interaction_Secondary(InputAction.CallbackContext context);
        void OnHands_HidePullOut(InputAction.CallbackContext context);
    }
    public interface IPlayer_UIActions
    {
        void OnInventory_Open(InputAction.CallbackContext context);
        void OnInventory_Item_Remove(InputAction.CallbackContext context);
        void OnInventory_Cursor_Position(InputAction.CallbackContext context);
    }
}
